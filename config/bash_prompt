#!/bin/bash
#
# Author: bash_prompt@alphasocket.dev
#
# Format:
#	Indicator user@host [cwd] (git/hg_branch) $
# Example:
#	> alphasocket@ASUS-K55VD [/home/user/Projects/subvProject] (feature/patch-123) $
#
# Indicator: >
#   	Blk bg	== Last command returned exit code != 0
#   	Red bg  == last cmd returned exit code == 0
# User:
#   	Red     == Root(UID 0) Login shell (i.e. sudo bash)
#   	White   == Normal user
# Host:
#   	Red     == Insecure remote connection
#   	White   == Local session or SSH
# Cwd:
#   	Red     == Current user does not have write priviledges
#   	Write   == Current user does have write priviledges
# Git/Hg status:
#	    Red	    == Dirty or uncommitted
#	    Green	== Clean
#
# Sources:
#   https://krash.be/node/25
#   http://www.tldp.org/HOWTO/Bash-Prompt-HOWTO/x329.html
#   http://www.tldp.org/HOWTO/Bash-Prompt-HOWTO/x279.html
#   http://unix.stackexchange.com/questions/8396/bash-display-exit-status-in-prompt
#   http://www.ibm.com/developerworks/linux/library/l-tip-prompt/


# Table
# Text Reset
Color_Off='\e[0m'

# Regular Colors
Black='\e[0;30m'
Red='\e[0;31m'
Green='\e[0;32m'
Yellow='\e[0;33m'
Blue='\e[0;34m'
Purple='\e[0;35m'
Cyan='\e[0;36m'
White='\e[0;37m'

# Bold
BBlack='\e[1;30m'
BRed='\e[1;31m'
BGreen='\e[1;32m'
BYellow='\e[1;33m'
BBlue='\e[1;34m'
BPurple='\e[1;35m'
BCyan='\e[1;36m'
BWhite='\e[1;37m'

# Underline
UBlack='\e[4;30m'
URed='\e[4;31m'
UGreen='\e[4;32m'
UYellow='\e[4;33m'
UBlue='\e[4;34m'
UPurple='\e[4;35m'
UCyan='\e[4;36m'
UWhite='\e[4;37m'

# Background
On_Black='\e[40m'
On_Red='\e[41m'
On_Green='\e[42m'
On_Yellow='\e[43m'
On_Blue='\e[44m'
On_Purple='\e[45m'
On_Cyan='\e[46m'
On_White='\e[47m'

# High Intensty
IBlack='\e[0;90m'
IRed='\e[0;91m'
IGreen='\e[0;92m'
IYellow='\e[0;93m'
IBlue='\e[0;94m'
IPurple='\e[0;95m'
ICyan='\e[0;96m'
IWhite='\e[0;97m'

# Bold High Intensty
BIBlack='\e[1;90m'
BIRed='\e[1;91m'
BIGreen='\e[1;92m'
BIYellow='\e[1;93m'
BIBlue='\e[1;94m'
BIPurple='\e[1;95m'
BICyan='\e[1;96m'
BIWhite='\e[1;97m'

# High Intensty backgrounds
On_IBlack='\e[0;100m'
On_IRed='\e[0;101m'
On_IGreen='\e[0;102m'
On_IYellow='\e[0;103m'
On_IBlue='\e[0;104m'
On_IPurple='\e[10;95m'
On_ICyan='\e[0;106m'
On_IWhite='\e[0;107m'

function build_bash_prompt {
    # Check if last_exit_code_returned_0
    if [ $? = 0 ]
    then
        local last_exit_code_returned_0=1
    else
        local last_exit_code_returned_0=0
	fi

    # Reset PS1
    PS1="\n"

	# Head is white bold char ">" if the last cmd returned 0
    if [ $last_exit_code_returned_0 = 1 ]
    then
            # 0 returned by last command
            PS1="${PS1}\[$BWhite\]>\[$Color_Off\]"
		else
			# != 0 returned by last command
			PS1="${PS1}\[$BRed\]>\[$Color_Off\]"
	fi

    # Space
    PS1="${PS1} "

	# Bold, white/red username
	if [[ $EUID == 0 ]]
		then
			# Root user
			PS1="${PS1}\[$BRed\]\u\[$Color_Off\]"
		else
			# Non root user
			PS1="${PS1}\[$BWhite\]\u\[$Color_Off\]"
	fi

    # White/red @
	if [ -n "$http_proxy" ]
		then
			# Proxy setted
			PS1="${PS1}\[$White\]@\[$Color_Off\]"
		else
			# Proxy not setted
			PS1="${PS1}\[$Red\]@\[$Color_Off\]"
	fi

    # if shell is contained wrap hostname in graph parenthesis
    if [ ! $SHLVL == "1" ]; then
        PS1="${PS1}{"
    fi

	# Bold, white/red hostname
	if [[ "${SSH_CLIENT}" ]] || [[ "${SSH2_CLIENT}" ]] || [ "${SESS_SRC}" == "(:0.0)" ]
        then
            # Using an unsecure shell
            PS1="${PS1}\[$BRed\]\H\[$Color_Off\]"
        else
            # System console or SSH
            PS1="${PS1}\[$BWhite\]\H\[$Color_Off\]"
    fi

    # if shell is contained wrap hostname in graph parenthesis
    if [ ! $SHLVL == "1" ]; then
        PS1="${PS1}}"
    fi

	# Bold white pwd in [ ]
    PS1="${PS1} \[$BWhite\][\[$Color_Off\]"
	if [ -w "$PWD" ]
		then
			# Writable pwd
			PS1="${PS1}\[$BWhite\]${PWD}\[$Color_Off\]"
		else
			# Read only pwd
            PS1="${PS1}\[$BRed\]${PWD}\[$Color_Off\]"
	fi
    PS1="${PS1}\[$BWhite\]]\[$Color_Off\]"

    if [ -z $BASH_PROMPT_DISABLE_REPO_STATUS ]; then

        if [ -z $BASH_PROMPT_DISABLE_GIT_STATUS ]; then
        	# Git infos
            local _git_branch_
            # If is in a git repo
            if _git_branch_=$(git rev-parse --abbrev-ref HEAD 2> /dev/null);
        	then
        		# git status define color
        		if [ -n "$(git status --short 2> /dev/null)" ]
        		    then
                        # Dirty repo
                        PS1="${PS1} \[$Red\](git: $_git_branch_)\[$Color_Off\]"
        		    else
                        # Clean repo
                        PS1="${PS1} \[$Green\](git: $_git_branch_)\[$Color_Off\]"
        		fi
        	fi
        fi

        if [ -z $BASH_PROMPT_DISABLE_HG_STATUS ]; then
            # Hg infos
            local _hg_branch_
            # If is in a git repo
            if _hg_branch_=$(cat .hg/branch 2> /dev/null);
        	then
        		# git status define color
        		if [ -n "$(hg st 2> /dev/null)" ]
        		    then
                        # Dirty repo
                        PS1="${PS1} \[$Red\](hg: $_hg_branch_)\[$Color_Off\]"
        		    else
                        # Clean repo
                        PS1="${PS1} \[$Green\](hg: $_hg_branch_)\[$Color_Off\]"
        		fi
        	fi
        fi
    fi

    # Adding date
    PS1="${PS1} `date +\"%Y-%m-%d %H:%M:%S\"`"

    if [ $LAST_COMMAND_START_TIME ]
    then
    	# Compute the difference in dates in seconds
	let "duration=`date +%s`-$LAST_COMMAND_START_TIME"
	last_command_duration=`format_seconds $duration`

    	PS1="${PS1} ($last_command_duration)"
    	LAST_COMMAND_START_TIME=""
	fi

    # Space
    PS1="${PS1} "

    # Tail is white bold char "$" or '#' for root if the last cmd returned 0 and a "\n"
    if [ $last_exit_code_returned_0 = 1 ]
    then
            # 0 returned by last command
            PS1="${PS1}\[$BWhite\]\$\n\[$Color_Off\]"
		else
			# != 0 returned by last command
			PS1="${PS1}\[$BRed\]\$\n\[$Color_Off\]"
	fi

    # Print PS1
    export PS1="${PS1}"
}

# Save history
history -a

# Set function as prompt_command for buildin the same prompt in future
PROMPT_COMMAND=build_bash_prompt

#
# BUILDING PS1
#
build_bash_prompt
